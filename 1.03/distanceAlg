#include <stdio.h>
#include <stdlib.h>

#define NULL (void *)0


typedef struct node {
    int prio;
    struct node* next;
    int data[2];

} Node;


Node* newNode(int d[], int p)
{
    Node* temp = (Node*)malloc(sizeof(Node));
    temp->data = d;
    temp->prio = p;
    temp->next = NULL;

    return temp;
}

int peek(Node** head)
{
    return (*head)->data;
}

void pop(Node** head)
{
    Node* temp = *head;
    (*head) = (*head)->next;
    free(temp);
}


void push(Node** head, int d[], int p)
{

    Node* temp = newNode(d, p);
    Node* start = (*head);
    if ((*head)->prio > p)
    {
        temp->next = *head;
        (*head) = temp;
    }
    else
    {

       while (start->next != NULL && start->next->prio < p)
       {
           start = start->next;
       }

        temp->next = start->next;
        start->next = temp;
    }
}

int isEmpty(Node** head)
{
    return (*head) == NULL;
}

int hexConverter( char hex[] )
{
	return 0;
}

int boaringDist( int hardness[21][80] , int playerpos[2])
{
	Node* q = newNode( playerpos , 0 );

	int dist[21][80];

	int i;
	int j;

	for( i = 0 ; i < 21 ; i += 1 )
	{
		for( j = 0 ; j < 80 ; j += 1 )
		{
			dist[i][j] = 10000;
		}
	}

	dist[playerpos[0]][playerpos[1]] = 0;

	while(!isEmpty(&q))
	{
		int cur[2];
		cur = peek(&q);
		pop(&q);

		int y;
		int x;

		for( y = -1 ; y <= 1 ; y += 1 )
		{
			for( x = -1 ; x <= 1 ; x += 1 )
			{
				if( (cur[0] + y) < 21 && (cur[0] + y) >= 0 && (cur[1] + x) >= 0 && (cur[1] + x) < 80 )
				{
					if(dist[cur[0] + y][cur[1] + x] > dist[cur[0]][cur[1]] + 1 + (hexConverter(hardness[cur[0] + y][cur[1] + x]) / 85 ) && hexConverter(hardness[cur[0] + y][cur[1] + x]) < 255)
					{
						dist[cur[0] + y][cur[1] + x] = dist[cur[0]][cur[1]] + 1 + (hexConverter(hardness[cur[0] + y][cur[1] + x]) / 85 );
						int po[] = { cur[0] + y , cur[1] + x };
						push( &q , po , dist[cur[0] + y][cur[1] + x] );
					}
				}
			}
		}
	}

	return dist;
}


int walkingDist(int world[21][80], int playerpos[2])
{
	Node* q = newNode( playerpos , 0 );

	int dist[21][80];

	int i;
	int j;

	for( i = 0 ; i < 21 ; i += 1 )
	{
		for( j = 0 ; j < 80 ; j += 1 )
		{
				dist[i][j] = 10000;
		}
	}

	dist[playerpos[0]][playerpos[1]] = 0;

	while(!isEmpty(&q))
	{
		int cur[2];
		cur = peek(&q);
		pop(&q);

		int y;
		int x;

		for( y = -1 ; y <= 1 ; y += 1 )
		{
			for( x = -1 ; x <= 1 ; x += 1 )
			{
				if( (cur[0] + y) < 21 && (cur[0] + y) >= 0 && (cur[1] + x) >= 0 && (cur[1] + x) < 80 )
				{
					if(dist[cur[0] + y][cur[1] + x] > dist[cur[0]][cur[1]] + 1 && world[cur[0] + y][cur[1] + x] >= 1)
					{
						dist[cur[0] + y][cur[1] + x] = dist[cur[0]][cur[1]] + 1;
						int po[] = { cur[0] + y , cur[1] + x };
						push( &q , po , dist[cur[0] + y][cur[1] + x] );
					}
				}
			}
		}
	}

	return dist;
}

int main()
{
    // Create a Priority Queue
    // 7->4->5->6
    Node* pq = newNode(4, 1);
    push(&pq, 5, 2);
    push(&pq, 6, 3);
    push(&pq, 7, 0);

    while (!isEmpty(&pq)) {
        printf("%d ", peek(&pq));
        pop(&pq);
    }

    return 0;
}




