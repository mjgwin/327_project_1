#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <string.h>


typedef struct node {
    int prio;
    struct node* next;
    int data[2];

} Node;


Node* newNode(int x , int y , int p)
{
    Node* temp = (Node*)malloc(sizeof(Node));
    temp->data[0] = x;
    temp->data[1] = y;
    temp->prio = p;
    temp->next = NULL;

    return temp;
}

int * peek(Node** head)
{
    return (*head)->data;
}

void pop(Node** head)
{
    Node* temp = *head;
    (*head) = (*head)->next;
    free(temp);
}


void push(Node** head, int d[2], int p)
{

    Node* temp = newNode( d[0] , d[1] , p );
    Node* start = (*head);
    if (((*head)->prio) > p)
    {
        temp->next = *head;
        (*head) = temp;
    }
    else
    {

       while (start->next != NULL && start->next->prio < p)
       {
           start = start->next;
       }

        temp->next = start->next;
        start->next = temp;
    }
}

int isEmpty(Node** head)
{
    return (*head) == NULL;
}

int * boaringDist( int hardness[21][80] , int playerpos[2])
{
	Node* q = newNode( playerpos[0] , playerpos[1] , 0 );

	int boreDist[21][80];

	int i;
	int j;

	for( i = 0 ; i < 21 ; i += 1 )
	{
		for( j = 0 ; j < 80 ; j += 1 )
		{
			boreDist[i][j] = 10000;
		}
	}

	boreDist[playerpos[0]][playerpos[1]] = 0;

	while(!isEmpty(&q))
	{
		int cur[2];

		cur[0] = peek(&q)[0];
		cur[1] = peek(&q)[1];

		pop(&q);

		int y;
		int x;

		for( y = -1 ; y <= 1 ; y += 1 )
		{
			for( x = -1 ; x <= 1 ; x += 1 )
			{
				if( (cur[0] + y) < 21 && (cur[0] + y) >= 0 && (cur[1] + x) >= 0 && (cur[1] + x) < 80 )
				{
					if(boreDist[cur[0] + y][cur[1] + x] > boreDist[cur[0]][cur[1]] + 1 + ( hardness[cur[0] + y][cur[1] + x] / 85 ) && hardness[cur[0] + y][cur[1] + x] < 255)
					{
						boreDist[cur[0] + y][cur[1] + x] = boreDist[cur[0]][cur[1]] + 1 + (hardness[cur[0] + y][cur[1] + x] / 85 );
						int po[] = { cur[0] + y , cur[1] + x };
						push( &q , po , boreDist[cur[0] + y][cur[1] + x] );
					}
				}
			}
		}
	}

	return boreDist;
}


int * walkingDist(int world[21][80], int playerpos[2])
{
	Node* q = newNode( playerpos[0] , playerpos[1] , 0 );

	int walkDist[21][80];


	int i;
	int j;

	for( i = 0 ; i < 21 ; i += 1 )
	{
		for( j = 0 ; j < 80 ; j += 1 )
		{
				walkDist[i][j] = 10000;
		}
	}

	walkDist[playerpos[0]][playerpos[1]] = 0;

	while(!isEmpty(&q))
	{
		int cur[2];

		cur[0] = peek(&q)[0];
		cur[1] = peek(&q)[1];

		pop(&q);

		int y;
		int x;

		for( y = -1 ; y <= 1 ; y += 1 )
		{
			for( x = -1 ; x <= 1 ; x += 1 )
			{
				if( (cur[0] + y) < 21 && (cur[0] + y) >= 0 && (cur[1] + x) >= 0 && (cur[1] + x) < 80 )
				{
					if(walkDist[cur[0] + y][cur[1] + x] > walkDist[cur[0]][cur[1]] + 1 && world[cur[0] + y][cur[1] + x] >= 1)
					{
						walkDist[cur[0] + y][cur[1] + x] = walkDist[cur[0]][cur[1]] + 1;
						int po[] = { cur[0] + y , cur[1] + x };
						push( &q , po , walkDist[cur[0] + y][cur[1] + x] );
					}
				}
			}
		}
	}


	return walkDist;
}


int main()
{
    // Create a Priority Queue
    // 7->4->5->6
    Node* pq = newNode(0 , 0 , 1);
    int t[2] = {2,2};
    push(&pq, t , 2);
    int t1[2] = {6,6};
    push(&pq, t1, 3);
    int t2[2] = {7,7};
    push(&pq, t2, 0);

    while (!isEmpty(&pq)) {
        printf("%d ", peek(&pq)[0]);
        printf("%d ", peek(&pq)[1]);
        pop(&pq);
    }

    return 0;
}
