
dims.h,146
# define DIMS_H2,15
typedef enum dim 7,190
  dim_x,8,209
  dim_y,9,218
  num_dims10,227
} dim_t;11,238
typedef int8_t pair_t[pair_t13,248

dungeon.c,1562
#define DUMP_HARDNESS_IMAGES 17,285
typedef struct corridor_path 19,317
  heap_node_t *hn;hn20,348
  uint8_t pos[pos21,367
  uint8_t from[from22,385
  int32_t cost;23,404
} corridor_path_t;24,420
static uint32_t adjacent_to_room(44,837
static uint32_t is_open_space(52,1098
static int32_t corridor_path_cmp(57,1197
static void dijkstra_corridor(61,1347
static void dijkstra_corridor_inv(160,5084
#define hardnesspair_inv(213,6406
static int connect_two_rooms(263,9077
static int create_cycle(282,9729
static int connect_rooms(324,11294
int gaussian[gaussian337,11487
typedef struct queue_node 345,11643
  int x,346,11671
  int x, y;346,11671
  struct queue_node *next;next347,11683
} queue_node_t;348,11710
static int smooth_hardness(350,11727
static int empty_dungeon(509,15998
static int place_rooms(528,16374
static void place_stairs(565,17561
static int make_rooms(587,18196
int gen_dungeon(610,18759
void render_dungeon(623,18921
void delete_dungeon(711,20905
void init_dungeon(716,20962
int write_dungeon_map(721,21019
int write_rooms(734,21248
uint16_t count_up_stairs(756,21720
uint16_t count_down_stairs(772,21971
int write_stairs(788,22226
uint32_t calculate_dungeon_size(820,22981
int write_dungeon(831,23452
int read_dungeon_map(897,25007
int read_stairs(920,25605
int read_rooms(943,26082
int read_dungeon(1001,28008
int read_pgm(1082,29885
void render_hardness_map(1167,32288
void render_movement_cost_map(1190,32815
void render_distance_map(1212,33320
void render_tunnel_distance_map(1268,34748

dungeon.h,1907
# define DUNGEON_H2,18
#define DUNGEON_X 7,77
#define DUNGEON_Y 8,111
#define MIN_ROOMS 9,145
#define MAX_ROOMS 10,178
#define ROOM_MIN_X 11,212
#define ROOM_MIN_Y 12,245
#define ROOM_MAX_X 13,278
#define ROOM_MAX_Y 14,312
#define DEFAULT_MONS 15,346
#define SAVE_DIR 16,380
#define DUNGEON_SAVE_FILE 17,421
#define DUNGEON_SAVE_SEMANTIC 18,462
#define DUNGEON_SAVE_VERSION 19,508
#define mappair(21,543
#define mapxy(22,600
#define hardnesspair(23,635
#define hardnessxy(24,702
typedef enum __attribute__ ((__packed__)) terrain_type 26,748
  ter_debug,27,805
  ter_wall,28,818
  ter_wall_immutable,29,830
  ter_floor,30,852
  ter_floor_room,31,865
  ter_floor_hall,32,883
  ter_stairs,33,901
  ter_stairs_up,34,915
  ter_stairs_down,35,932
  ter_mon_0,36,951
  ter_mon_1,37,964
  ter_mon_2,38,977
  ter_mon_3,39,990
  ter_mon_4,40,1003
  ter_mon_5,41,1016
  ter_mon_6,42,1029
  ter_mon_7,43,1042
  ter_mon_8,44,1055
  ter_mon_9,45,1068
  ter_mon_a,46,1081
  ter_mon_b,47,1094
  ter_mon_c,48,1107
  ter_mon_d,49,1120
  ter_mon_e,50,1133
  ter_mon_f51,1146
} terrain_type_t;52,1158
typedef struct mon 55,1178
  heap_node_t *hn;hn56,1199
  pair_t position;57,1218
  pair_t memory;58,1237
  int32_t nextTurn;59,1254
  int32_t speed;60,1274
  int32_t prio;61,1291
  char c;62,1307
  int prev;63,1317
  terrain_type_t id;64,1329
} mon_t;65,1350
typedef struct room 67,1360
  pair_t position;68,1382
  pair_t size;69,1401
} room_t;70,1416
typedef struct pc 72,1427
  pair_t position;73,1447
} pc_t;74,1466
typedef struct dungeon 78,1477
  uint32_t num_rooms;79,1502
  uint32_t num_mons;80,1524
  room_t *rooms;rooms81,1545
  mon_t *mons;mons82,1562
  terrain_type_t map[map83,1577
  uint8_t hardness[hardness92,2230
  uint8_t pc_distance[pc_distance93,2272
  uint8_t pc_tunnel[pc_tunnel94,2317
  pc_t pc;95,2360
} dungeon_t;96,2371

heap.c,1020
struct heap_node 8,99
  heap_node_t *next;next9,118
  heap_node_t *prev;prev10,139
  heap_node_t *parent;parent11,160
  heap_node_t *child;child12,183
  void *datum;datum13,205
  uint32_t degree;14,220
  uint32_t mark;15,239
#define swap(18,260
#define splice_heap_node_lists(24,372
#define insert_heap_node_in_list(33,684
#define remove_heap_node_from_list(40,908
void print_heap_node(45,1041
void print_heap(61,1363
void print_heap_node_list(78,1665
void heap_init(94,1864
void heap_node_delete(104,2100
void heap_delete(122,2404
heap_node_t *heap_insert(heap_insert133,2569
void *heap_peek_min(heap_peek_min153,2895
static void heap_link(158,2971
static void heap_consolidate(172,3293
void *heap_remove_min(heap_remove_min213,4226
int heap_combine(248,4760
static void heap_cut(277,5411
static void heap_cascading_cut(291,5692
int heap_decrease_key(305,5918
int heap_decrease_key_no_replace(319,6160
int32_t compare(343,6734
char *print_int(print_int348,6833
int main(357,6951

heap.h,245
# define HEAP_H2,15
typedef struct heap_node heap_node_t;11,114
typedef struct heap 13,153
  heap_node_t *min;min14,175
  uint32_t size;15,195
  int32_t (*compare)compare16,212
  void (*datum_delete)datum_delete17,269
} heap_t;18,301

path.c,302
static dungeon_t *dungeon;dungeon15,673
typedef struct path 17,701
  heap_node_t *hn;hn18,723
  uint8_t pos[pos19,742
} path_t;20,760
static int32_t dist_cmp(22,771
static int32_t tunnel_cmp(29,1125
void dijkstra(36,1473
#define tunnel_movement_cost(146,5965
void dijkstra_tunnel(149,6057

path.h,93
# define PATH_H2,15
# define HARDNESS_PER_TURN 4,32
typedef struct dungeon dungeon_t;6,63

rlg327.c,297
static int32_t mon_cmp(14,182
int in_room(22,411
void usage(38,1193
terrain_type_t set_mon_id(48,1403
int mons_overlap(102,2239
int overlaps_with_any(107,2408
void generate_pc(120,2609
void generate_mon(131,2964
void generate_mons(196,4913
void monster_loop(214,5322
int main(633,20328

utils.c,25
int makedirectory(9,124

utils.h,123
# define UTILS_H2,16
# define rand_under(6,147
# define rand_range(10,290
#define malloc(12,364
#define UNUSED(18,508
